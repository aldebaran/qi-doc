Network Handling
================
  - sync VS async
  - timeout
  - deconnection / network problem

== Sync Vs Async ==
We support synchronous and asynchronous network operation for client and subscriber. Synchronous is easy to understand, you call a blocking method that will return the result you are waiting for. For asynchronous you pass a callback, that will be called when the result is there, the function is not blocking.



== Timeout ==
We handle timeout for each mode, timeout are global to a client or a server and set to 20sec by default.

=== Client ===
==== Constructor ====
Constructor do not throw nor do networking.

==== Connect ====
We call connect on the client, the client will register to the master and connect to the destination. If the master is not available an exception is raised when the timeout expire.
ZMQ connect will not wait for the connection to be really established. We wait till the connection is established or throw an exception on error.
TODO: implement that

==== Call ====
We call zmq_send that is async and should not block (TODO: only if the queue if full?). Then we use a ZMQPollClient class facility that call poll with a timeout and call recv on success.

ATM: (should be removed if connect wait till the connection is established)
There is a special case for the first time we use a transport, zmq being full async we dont know if the server we try to reach is even created. (server.bind is async). So we use a loop which poll with a small timeout, when the global timeout expire, we raise an exception if we did not receive anything.

==== Async Call ====
TODO

==== Destructor ====
TODO


=== Server ===
==== Constructor ====
The constructor will not throw nor do networking.

==== Connect ====
We call connect on the server, that will register with the master and bind it's interface. If the server is not running after 20sec we raise an exception.

==== Destructor ====
To shutdown a server, we set _running to false, send a message to the server to wake up recv, and finally destroy the server.

== Deconnection ==
TODO:How do we handle network problem, client and server that segfault?
